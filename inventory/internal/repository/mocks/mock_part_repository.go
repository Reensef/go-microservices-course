// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Reensef/go-microservices-course/inventory/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPartRepository creates a new instance of MockPartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPartRepository {
	mock := &MockPartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPartRepository is an autogenerated mock type for the PartRepository type
type MockPartRepository struct {
	mock.Mock
}

type MockPartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPartRepository) EXPECT() *MockPartRepository_Expecter {
	return &MockPartRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) Create(ctx context.Context, part *model.PartInfo) (*model.Part, error) {
	ret := _mock.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartInfo) (*model.Part, error)); ok {
		return returnFunc(ctx, part)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartInfo) *model.Part); ok {
		r0 = returnFunc(ctx, part)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.PartInfo) error); ok {
		r1 = returnFunc(ctx, part)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPartRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - part *model.PartInfo
func (_e *MockPartRepository_Expecter) Create(ctx interface{}, part interface{}) *MockPartRepository_Create_Call {
	return &MockPartRepository_Create_Call{Call: _e.mock.On("Create", ctx, part)}
}

func (_c *MockPartRepository_Create_Call) Run(run func(ctx context.Context, part *model.PartInfo)) *MockPartRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.PartInfo
		if args[1] != nil {
			arg1 = args[1].(*model.PartInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_Create_Call) Return(part1 *model.Part, err error) *MockPartRepository_Create_Call {
	_c.Call.Return(part1, err)
	return _c
}

func (_c *MockPartRepository_Create_Call) RunAndReturn(run func(ctx context.Context, part *model.PartInfo) (*model.Part, error)) *MockPartRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) GetAll(ctx context.Context) ([]*model.Part, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*model.Part, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*model.Part); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockPartRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPartRepository_Expecter) GetAll(ctx interface{}) *MockPartRepository_GetAll_Call {
	return &MockPartRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockPartRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockPartRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPartRepository_GetAll_Call) Return(parts []*model.Part, err error) *MockPartRepository_GetAll_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockPartRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]*model.Part, error)) *MockPartRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) GetByFilter(ctx context.Context, filter *model.PartsFilter) ([]*model.Part, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []*model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) ([]*model.Part, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) []*model.Part); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.PartsFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MockPartRepository_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.PartsFilter
func (_e *MockPartRepository_Expecter) GetByFilter(ctx interface{}, filter interface{}) *MockPartRepository_GetByFilter_Call {
	return &MockPartRepository_GetByFilter_Call{Call: _e.mock.On("GetByFilter", ctx, filter)}
}

func (_c *MockPartRepository_GetByFilter_Call) Run(run func(ctx context.Context, filter *model.PartsFilter)) *MockPartRepository_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.PartsFilter
		if args[1] != nil {
			arg1 = args[1].(*model.PartsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_GetByFilter_Call) Return(parts []*model.Part, err error) *MockPartRepository_GetByFilter_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockPartRepository_GetByFilter_Call) RunAndReturn(run func(ctx context.Context, filter *model.PartsFilter) ([]*model.Part, error)) *MockPartRepository_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockPartRepository
func (_mock *MockPartRepository) GetByID(ctx context.Context, id string) (*model.Part, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Part, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Part); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPartRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPartRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPartRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockPartRepository_GetByID_Call {
	return &MockPartRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockPartRepository_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockPartRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPartRepository_GetByID_Call) Return(part *model.Part, err error) *MockPartRepository_GetByID_Call {
	_c.Call.Return(part, err)
	return _c
}

func (_c *MockPartRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Part, error)) *MockPartRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}
