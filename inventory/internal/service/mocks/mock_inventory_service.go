// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Reensef/go-microservices-course/inventory/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInventoryService creates a new instance of MockInventoryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInventoryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInventoryService {
	mock := &MockInventoryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInventoryService is an autogenerated mock type for the InventoryService type
type MockInventoryService struct {
	mock.Mock
}

type MockInventoryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInventoryService) EXPECT() *MockInventoryService_Expecter {
	return &MockInventoryService_Expecter{mock: &_m.Mock}
}

// GetPartByID provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) GetPartByID(ctx context.Context, id string) (*model.Part, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPartByID")
	}

	var r0 *model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.Part, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.Part); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_GetPartByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartByID'
type MockInventoryService_GetPartByID_Call struct {
	*mock.Call
}

// GetPartByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockInventoryService_Expecter) GetPartByID(ctx interface{}, id interface{}) *MockInventoryService_GetPartByID_Call {
	return &MockInventoryService_GetPartByID_Call{Call: _e.mock.On("GetPartByID", ctx, id)}
}

func (_c *MockInventoryService_GetPartByID_Call) Run(run func(ctx context.Context, id string)) *MockInventoryService_GetPartByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_GetPartByID_Call) Return(part *model.Part, err error) *MockInventoryService_GetPartByID_Call {
	_c.Call.Return(part, err)
	return _c
}

func (_c *MockInventoryService_GetPartByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*model.Part, error)) *MockInventoryService_GetPartByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartsByFilter provides a mock function for the type MockInventoryService
func (_mock *MockInventoryService) GetPartsByFilter(ctx context.Context, filter *model.PartsFilter) ([]*model.Part, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetPartsByFilter")
	}

	var r0 []*model.Part
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) ([]*model.Part, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.PartsFilter) []*model.Part); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Part)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.PartsFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInventoryService_GetPartsByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartsByFilter'
type MockInventoryService_GetPartsByFilter_Call struct {
	*mock.Call
}

// GetPartsByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *model.PartsFilter
func (_e *MockInventoryService_Expecter) GetPartsByFilter(ctx interface{}, filter interface{}) *MockInventoryService_GetPartsByFilter_Call {
	return &MockInventoryService_GetPartsByFilter_Call{Call: _e.mock.On("GetPartsByFilter", ctx, filter)}
}

func (_c *MockInventoryService_GetPartsByFilter_Call) Run(run func(ctx context.Context, filter *model.PartsFilter)) *MockInventoryService_GetPartsByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.PartsFilter
		if args[1] != nil {
			arg1 = args[1].(*model.PartsFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInventoryService_GetPartsByFilter_Call) Return(parts []*model.Part, err error) *MockInventoryService_GetPartsByFilter_Call {
	_c.Call.Return(parts, err)
	return _c
}

func (_c *MockInventoryService_GetPartsByFilter_Call) RunAndReturn(run func(ctx context.Context, filter *model.PartsFilter) ([]*model.Part, error)) *MockInventoryService_GetPartsByFilter_Call {
	_c.Call.Return(run)
	return _c
}
