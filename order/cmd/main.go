package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/jackc/pgx/v5/stdlib"
	"github.com/joho/godotenv"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	orderV1API "github.com/Reensef/go-microservices-course/order/internal/api/order/v1"
	inventoryServiceV1 "github.com/Reensef/go-microservices-course/order/internal/client/grpc/inventory/v1"
	paymentServiceV1 "github.com/Reensef/go-microservices-course/order/internal/client/grpc/payment/v1"
	orderRepo "github.com/Reensef/go-microservices-course/order/internal/repository/order"
	orderService "github.com/Reensef/go-microservices-course/order/internal/service/order"
	orderV1 "github.com/Reensef/go-microservices-course/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/Reensef/go-microservices-course/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/Reensef/go-microservices-course/shared/pkg/proto/payment/v1"
	"github.com/Reensef/go-microservices-course/shared/pkg/utils"
)

const (
	httpPort = "8080"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout       = 5 * time.Second
	shutdownTimeout         = 10 * time.Second
	inventoryServiceAddress = "localhost:50051"
	paymenyServiceAddress   = "localhost:50052"
)

func main() {
	ctx := context.Background()

	err := godotenv.Load(".env")
	if err != nil {
		log.Printf("failed to load .env file: %v\n", err)
		return
	}

	postgresURI := os.Getenv("POSTGRES_URI")

	pool, err := pgxpool.New(ctx, postgresURI)
	if err != nil {
		log.Printf("failed to connect to database: %v\n", err)
		return
	}
	defer pool.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	err = pool.Ping(ctx)
	if err != nil {
		log.Printf("database unavailable: %v\n", err)
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
	migrationsDir := os.Getenv("ORDER_MIGRATIONS_DIR")
	pool.Config().Copy()
	migrator := utils.NewSqlMigrator(stdlib.OpenDB(*pool.Config().ConnConfig.Copy()), migrationsDir)

	err = migrator.Up()
	if err != nil {
		log.Printf("Error migrate database: %v\n", err)
		return
	}

	inventoryServiceConn, err := grpc.NewClient(
		inventoryServiceAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := inventoryServiceConn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v\n", cerr)
		}
	}()

	inventoryService := inventoryServiceV1.NewClient(
		inventoryV1.NewInventoryServiceClient(inventoryServiceConn),
	)

	paymentServiceConn, err := grpc.NewClient(
		paymenyServiceAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Printf("failed to connect: %v\n", err)
		return
	}
	defer func() {
		if cerr := paymentServiceConn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v\n", cerr)
		}
	}()

	paymentService := paymentServiceV1.NewClient(
		paymentV1.NewPaymentServiceClient(paymentServiceConn),
	)

	repo := orderRepo.NewRepository(pool)
	service := orderService.NewService(repo, inventoryService, paymentService)
	api := orderV1API.NewAPI(service)

	// –°–æ–∑–¥–∞–µ–º OpenAPI —Å–µ—Ä–≤–µ—Ä
	orderServer, err := orderV1.NewServer(api)
	if err != nil {
		log.Printf("Error creating OpenAPI server: %v\n", err)
		return
	}

	r := chi.NewRouter()

	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))

	r.Mount("/", orderServer)

	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	go func() {
		log.Printf("üöÄ HTTP server running on port %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå Server startup error: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë Shutting down server...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå Error while stopping the server: %v\n", err)
	}

	log.Println("‚úÖ Server stopped")
}
