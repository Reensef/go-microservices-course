// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/Reensef/go-microservices-course/order/internal/model"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CancelOrder(ctx context.Context, orderUuid uuid.UUID) error {
	ret := _mock.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, orderUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOrderService_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type MockOrderService_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid uuid.UUID
func (_e *MockOrderService_Expecter) CancelOrder(ctx interface{}, orderUuid interface{}) *MockOrderService_CancelOrder_Call {
	return &MockOrderService_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderUuid)}
}

func (_c *MockOrderService_CancelOrder_Call) Run(run func(ctx context.Context, orderUuid uuid.UUID)) *MockOrderService_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_CancelOrder_Call) Return(err error) *MockOrderService_CancelOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOrderService_CancelOrder_Call) RunAndReturn(run func(ctx context.Context, orderUuid uuid.UUID) error) *MockOrderService_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) CreateOrder(ctx context.Context, info *model.OrderInfo) (*model.Order, error) {
	ret := _mock.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.OrderInfo) (*model.Order, error)); ok {
		return returnFunc(ctx, info)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.OrderInfo) *model.Order); ok {
		r0 = returnFunc(ctx, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.OrderInfo) error); ok {
		r1 = returnFunc(ctx, info)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - info *model.OrderInfo
func (_e *MockOrderService_Expecter) CreateOrder(ctx interface{}, info interface{}) *MockOrderService_CreateOrder_Call {
	return &MockOrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, info)}
}

func (_c *MockOrderService_CreateOrder_Call) Run(run func(ctx context.Context, info *model.OrderInfo)) *MockOrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.OrderInfo
		if args[1] != nil {
			arg1 = args[1].(*model.OrderInfo)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) Return(order *model.Order, err error) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, info *model.OrderInfo) (*model.Order, error)) *MockOrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderByUUID provides a mock function for the type MockOrderService
func (_mock *MockOrderService) GetOrderByUUID(ctx context.Context, orderUuid uuid.UUID) (*model.Order, error) {
	ret := _mock.Called(ctx, orderUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByUUID")
	}

	var r0 *model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Order, error)); ok {
		return returnFunc(ctx, orderUuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Order); ok {
		r0 = returnFunc(ctx, orderUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderUuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_GetOrderByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByUUID'
type MockOrderService_GetOrderByUUID_Call struct {
	*mock.Call
}

// GetOrderByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid uuid.UUID
func (_e *MockOrderService_Expecter) GetOrderByUUID(ctx interface{}, orderUuid interface{}) *MockOrderService_GetOrderByUUID_Call {
	return &MockOrderService_GetOrderByUUID_Call{Call: _e.mock.On("GetOrderByUUID", ctx, orderUuid)}
}

func (_c *MockOrderService_GetOrderByUUID_Call) Run(run func(ctx context.Context, orderUuid uuid.UUID)) *MockOrderService_GetOrderByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOrderService_GetOrderByUUID_Call) Return(order *model.Order, err error) *MockOrderService_GetOrderByUUID_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockOrderService_GetOrderByUUID_Call) RunAndReturn(run func(ctx context.Context, orderUuid uuid.UUID) (*model.Order, error)) *MockOrderService_GetOrderByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function for the type MockOrderService
func (_mock *MockOrderService) PayOrder(ctx context.Context, orderUuid uuid.UUID, userUuid uuid.UUID, paymentMethod model.OrderPaymentMethod) (*uuid.UUID, error) {
	ret := _mock.Called(ctx, orderUuid, userUuid, paymentMethod)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 *uuid.UUID
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, model.OrderPaymentMethod) (*uuid.UUID, error)); ok {
		return returnFunc(ctx, orderUuid, userUuid, paymentMethod)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, model.OrderPaymentMethod) *uuid.UUID); ok {
		r0 = returnFunc(ctx, orderUuid, userUuid, paymentMethod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, model.OrderPaymentMethod) error); ok {
		r1 = returnFunc(ctx, orderUuid, userUuid, paymentMethod)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type MockOrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUuid uuid.UUID
//   - userUuid uuid.UUID
//   - paymentMethod model.OrderPaymentMethod
func (_e *MockOrderService_Expecter) PayOrder(ctx interface{}, orderUuid interface{}, userUuid interface{}, paymentMethod interface{}) *MockOrderService_PayOrder_Call {
	return &MockOrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, orderUuid, userUuid, paymentMethod)}
}

func (_c *MockOrderService_PayOrder_Call) Run(run func(ctx context.Context, orderUuid uuid.UUID, userUuid uuid.UUID, paymentMethod model.OrderPaymentMethod)) *MockOrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 model.OrderPaymentMethod
		if args[3] != nil {
			arg3 = args[3].(model.OrderPaymentMethod)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockOrderService_PayOrder_Call) Return(transactionUUID *uuid.UUID, err error) *MockOrderService_PayOrder_Call {
	_c.Call.Return(transactionUUID, err)
	return _c
}

func (_c *MockOrderService_PayOrder_Call) RunAndReturn(run func(ctx context.Context, orderUuid uuid.UUID, userUuid uuid.UUID, paymentMethod model.OrderPaymentMethod) (*uuid.UUID, error)) *MockOrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}
