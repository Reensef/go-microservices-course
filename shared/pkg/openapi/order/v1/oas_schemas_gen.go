// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *GenericErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/bad_request_error
type BadRequestError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) createOrderRes() {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #/components/schemas/conflict_error
type ConflictError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes() {}
func (*ConflictError) payOrderRes()    {}

// Ref: #/components/schemas/create_order_request
type CreateOrderRequest struct {
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список ID деталей.
	PartIds []string `json:"part_ids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() string {
	return s.UserUUID
}

// GetPartIds returns the value of PartIds.
func (s *CreateOrderRequest) GetPartIds() []string {
	return s.PartIds
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartIds sets the value of PartIds.
func (s *CreateOrderRequest) SetPartIds(val []string) {
	s.PartIds = val
}

// Ref: #/components/schemas/create_order_response
type CreateOrderResponse struct {
	// UUID заказа.
	OrderUUID string `json:"order_uuid"`
	// Итоговая стоимость заказа.
	TotalPrice float64 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() string {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() float64 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #/components/schemas/generic_error
type GenericError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val string) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

// Ref: #/components/schemas/internal_server_error
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes()    {}
func (*InternalServerError) createOrderRes()    {}
func (*InternalServerError) getOrderByUUIDRes() {}
func (*InternalServerError) payOrderRes()       {}

// Ref: #/components/schemas/not_found_error
type NotFoundError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes()    {}
func (*NotFoundError) createOrderRes()    {}
func (*NotFoundError) getOrderByUUIDRes() {}
func (*NotFoundError) payOrderRes()       {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/order_dto
type OrderDto struct {
	// UUID заказа.
	OrderUUID string `json:"order_uuid"`
	// UUID пользователя.
	UserUUID string `json:"user_uuid"`
	// Список ID деталей.
	PartIds []string `json:"part_ids"`
	// Итоговая стоимость заказа.
	TotalPrice      float64       `json:"total_price"`
	TransactionUUID OptString     `json:"transaction_uuid"`
	PaymentMethod   PaymentMethod `json:"payment_method"`
	Status          OrderStatus   `json:"status"`
	CreatedAt       time.Time     `json:"created_at"`
	UpdatedAt       time.Time     `json:"updated_at"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *OrderDto) GetOrderUUID() string {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *OrderDto) GetUserUUID() string {
	return s.UserUUID
}

// GetPartIds returns the value of PartIds.
func (s *OrderDto) GetPartIds() []string {
	return s.PartIds
}

// GetTotalPrice returns the value of TotalPrice.
func (s *OrderDto) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *OrderDto) GetTransactionUUID() OptString {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *OrderDto) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *OrderDto) GetStatus() OrderStatus {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OrderDto) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *OrderDto) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetOrderUUID sets the value of OrderUUID.
func (s *OrderDto) SetOrderUUID(val string) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *OrderDto) SetUserUUID(val string) {
	s.UserUUID = val
}

// SetPartIds sets the value of PartIds.
func (s *OrderDto) SetPartIds(val []string) {
	s.PartIds = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *OrderDto) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *OrderDto) SetTransactionUUID(val OptString) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *OrderDto) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *OrderDto) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OrderDto) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *OrderDto) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*OrderDto) getOrderByUUIDRes() {}

// Статус заказа.
// Ref: #/components/schemas/order_status
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELED       OrderStatus = "CANCELED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELED:
		*s = OrderStatusCANCELED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/pay_order_request
type PayOrderRequest struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() PaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val PaymentMethod) {
	s.PaymentMethod = val
}

// Ref: #/components/schemas/pay_order_response
type PayOrderResponse struct {
	// UUID транзакции.
	TransactionUUID OptString `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() OptString {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val OptString) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}

// Способ оплаты.
// Ref: #/components/schemas/payment_method
type PaymentMethod string

const (
	PaymentMethodUNSPECIFIED   PaymentMethod = "UNSPECIFIED"
	PaymentMethodCARD          PaymentMethod = "CARD"
	PaymentMethodSBP           PaymentMethod = "SBP"
	PaymentMethodCREDITCARD    PaymentMethod = "CREDIT_CARD"
	PaymentMethodINVESTORMONEY PaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PaymentMethod values.
func (PaymentMethod) AllValues() []PaymentMethod {
	return []PaymentMethod{
		PaymentMethodUNSPECIFIED,
		PaymentMethodCARD,
		PaymentMethodSBP,
		PaymentMethodCREDITCARD,
		PaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodUNSPECIFIED:
		return []byte(s), nil
	case PaymentMethodCARD:
		return []byte(s), nil
	case PaymentMethodSBP:
		return []byte(s), nil
	case PaymentMethodCREDITCARD:
		return []byte(s), nil
	case PaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethod) UnmarshalText(data []byte) error {
	switch PaymentMethod(data) {
	case PaymentMethodUNSPECIFIED:
		*s = PaymentMethodUNSPECIFIED
		return nil
	case PaymentMethodCARD:
		*s = PaymentMethodCARD
		return nil
	case PaymentMethodSBP:
		*s = PaymentMethodSBP
		return nil
	case PaymentMethodCREDITCARD:
		*s = PaymentMethodCREDITCARD
		return nil
	case PaymentMethodINVESTORMONEY:
		*s = PaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/validation_error
type ValidationError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Сообщение об ошибке.
	Message string `json:"message"`
	// Детали ошибок валидации.
	Details []ValidationErrorDetailsItem `json:"details"`
}

// GetCode returns the value of Code.
func (s *ValidationError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ValidationError) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *ValidationError) GetDetails() []ValidationErrorDetailsItem {
	return s.Details
}

// SetCode sets the value of Code.
func (s *ValidationError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ValidationError) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *ValidationError) SetDetails(val []ValidationErrorDetailsItem) {
	s.Details = val
}

func (*ValidationError) cancelOrderRes()    {}
func (*ValidationError) createOrderRes()    {}
func (*ValidationError) getOrderByUUIDRes() {}
func (*ValidationError) payOrderRes()       {}

type ValidationErrorDetailsItem struct {
	// Имя поля которое не прошло валидацию.
	Field string `json:"field"`
	// Сообщение об ошибке для конкретного поля.
	Message string `json:"message"`
}

// GetField returns the value of Field.
func (s *ValidationErrorDetailsItem) GetField() string {
	return s.Field
}

// GetMessage returns the value of Message.
func (s *ValidationErrorDetailsItem) GetMessage() string {
	return s.Message
}

// SetField sets the value of Field.
func (s *ValidationErrorDetailsItem) SetField(val string) {
	s.Field = val
}

// SetMessage sets the value of Message.
func (s *ValidationErrorDetailsItem) SetMessage(val string) {
	s.Message = val
}
